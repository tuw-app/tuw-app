@page "/interval"

@using DataModel.EFDataModel;
@using DataModel.MDDataModel;
@using MeasureFrontend.Services;


@inject IAPIMeasureDeviceService APIMeasureDeviceService;
@inject IMDIntervalService MDIntervalServcie;

<h3>Mérőelemek időitervallum kezelése</h3>

<p>
    <button class="btn btn-info" @onclick="RefreshState">Adatok frissítése</button>
</p>

@if (devices==null) 
{
        <p>Az adatok betöltés alatt...</p>
}
else
{
    @if (devices.Count==0)
    {
    <p>Nincs elem az adatbázisban</p>
    }
    else
    {
        <p class="text-bg-primary">Az utolsó frissítés ideje: @refreshTime.ToString("yyyy.mm.dd dddd HH:mm:ss,ffff")</p>
        <p>Az adatábzisban @devices.Count mérő elemet találtam.</p>

        <div class="container">
            <div class="table-wrapper">

                <div class="table-title">
                    <div class="row">
                        <div class="col-sm-6">
                            <h2><b>Mérőeszközök</b> kezelése</h2>
                        </div>
                    </div>
                </div>
                <table class="table table-striped table-hover">                                
                        <thead>
                        <th>IP cím</th>
                        <th>Mérési intervallum (ms)</th>
                        <th>Módosítás</th>
                    </thead>
                    @foreach (EFMeasureDevice device in devices)
                    {
                        <tr>
                            <td>@device.Name</td>                                    
                                @if ((newDeviceInterval != null) && (newDeviceInterval.Keys.Contains(device.Name)))
                                {
                                    if (newDeviceInterval[device.Name].Interval > 0)
                                    {
                                        
                                        <td><center>@newDeviceInterval[device.Name].Interval ms</center></td>
                                        <td>
                                            <EditForm Model="@newDeviceInterval[device.Name]" OnValidSubmit="@HanleadValidIntervalSubmit" OnInvalidSubmit="@HanleadInvalidIntervalSubmit">
                                            <DataAnnotationsValidator />
                                                @if (errorMassage)
                                                {
                                                    <div>
                                                        <p><label>Hibaüzenet:</label><ValidationSummary /></p>
                                                    </div>
                                                }
                                                    <div>
                                                        <label for="formInterval">Új intervallum megadása és küldése:</label>
                                                        <InputNumber id="formInterval" @bind-Value="@newDeviceInterval[device.Name].Interval"></InputNumber>
                                                        <ValidationMessage For="@( () => newDeviceInterval[device.Name].Interval )" />
                                                        <tr><td><p class="text-right"><button type="submit" class="btn btn-info" Style="margin-top:10px">Küldés</button></p></td></tr>

                                                    </div>
                                                </EditForm>
                                        </td>

                                    }
                                    else
                                    {
                                        <td>Nincs adat</td>
                                    }
                                }
                            </tr>
                    }
                    
                </table>
            </div>
        </div>
    }
}

@code {

    private DateTime refreshTime = DateTime.Now;
    private String controlStatus = null;

    private List<EFMeasureDevice> devices = null;
    private Dictionary<string, MDFormInterval> newDeviceInterval = null;
    private Dictionary<string, MDFormInterval> currendDeviceIntervalInterval = null;

    private MDFormInterval FormInterval = new MDFormInterval(1);
    private bool errorMassage = false;
    private bool errorSending = false;

    private long currentInterval = -1;
    private long newInterval = -1;


    protected override async Task OnInitializedAsync()
    {
        await RefreshState();
    }

    private async Task RefreshState()
    {
        refreshTime = DateTime.Now;
        devices = await MDService.GetAllMeasureDevices();

        if (devices == null)
        {
            devices = new List<EFMeasureDevice>();
        }        
        else
        {
            newDeviceInterval = new Dictionary<string, MDFormInterval>();
            foreach (EFMeasureDevice device in devices)
            {
                currentInterval = await MDIntervalServcie.GetMDInterval(device.Name);

                if (!newDeviceInterval.Keys.Contains(device.Name))
                {
                    newDeviceInterval.Add(device.Name, new MDFormInterval(currentInterval));
                    Console.WriteLine($"New intervall: {device.Name},{currentInterval}");

                }                    
            }
            currendDeviceIntervalInterval = new Dictionary<string, MDFormInterval>();
            foreach (KeyValuePair<string,MDFormInterval> data in newDeviceInterval)
            {
                currendDeviceIntervalInterval.Add( data.Key, new MDFormInterval(data.Value.Interval));
                Console.WriteLine($"Current dataintervall {data.Key},{data.Value.Interval}");
            }
        }
    }

    private async void HanleadValidIntervalSubmit(EditContext context)
    {
        Console.WriteLine($"HanleadValidIntervalSubmit");
        if (context != null)
        {
            errorMassage = false;
            errorSending = false;

            Console.WriteLine("Current data");
            foreach (KeyValuePair<string, MDFormInterval> data in newDeviceInterval)
            {
                Console.WriteLine($"Current data: {data.Key},{data.Value.Interval}");
            }


            Console.WriteLine($"HanleadValidIntervalSubmit->Context submit ok.");
            foreach (KeyValuePair<string, MDFormInterval> data in newDeviceInterval)
            {
                Console.WriteLine($"HanleadValidIntervalSubmit->New: IPAddress:{data.Key} {data.Value.Interval}");
                if (currendDeviceIntervalInterval.Keys.Contains(data.Key) && currendDeviceIntervalInterval[data.Key].Interval != data.Value.Interval)
                {
                    Console.WriteLine($"Küldésre kerülő adatok {data.Key},{data.Value.Interval}");
                    await Send(data.Key, data.Value);
                }
            }
            await RefreshState();
        }
    }

    private void HanleadInvalidIntervalSubmit(EditContext context)
    {
        Console.WriteLine($"HanleadIntervalSubmit");
        errorMassage = true;
        errorSending = false;

    }

    private async Task Send(string IPAddress, MDFormInterval interval)
    {
        MDIntervalData data = new MDIntervalData(interval.Interval);
        bool succer = await MDIntervalServcie.SendIntervalToDevice(IPAddress, data);
    }
}

