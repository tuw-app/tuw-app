@page "/interval"

@using DataModel.EFDataModel;
@using DataModel.MDDataModel;
@using MeasureFrontend.Services;


@inject IAPIMeasureDeviceService APIMeasureDeviceService;
@inject IMDIntervalService MDIntervalServcie;

<h3>Mérőelemek időitervallum kezelése</h3>

@if (devices==null) 
{
        <p>Az adatok betöltés alatt...</p>
}
else
{
    @if (devices.Count==0)
    {
    <p>Nincs elem az adatbázisban</p>
    }
    else
    {
        <p class="text-bg-primary">Az utolsó frissítés ideje: @refreshTime.ToString("yyyy.mm.dd dddd HH:mm:ss,ffff")</p>
        <p>Az adatábzisban @devices.Count mérő elemet találtam.</p>

        <div class="container">
            <div class="table-wrapper">

                <div class="table-title">
                    <div class="row">
                        <div class="col-sm-6">
                            <h2><b>Mérőeszközök</b> kezelése</h2>
                        </div>
                    </div>
                </div>
                <table class="table table-striped table-hover">                                
                        <thead>
                        <th>IP cím</th>
                        <th>Mérési intervallum (ms)</th>
                        <th>Módosítás</th>
                    </thead>
                    @foreach (EFMeasureDevice device in devices)
                    {
                        <tr>
                            <td>@device.Name</td>                                    
                                @if ((newDeviceInterval != null) && (newDeviceInterval.Keys.Contains(device.Name)))
                                {
                                    if (newDeviceInterval[device.Name].Interval > 0)
                                    {
                                        
                                            <td><center>@newDeviceInterval[device.Name].Interval ms</center></td>
                                            <!--
                                            <td>
                                                <div class="form-group">
                                                    <label>Új intervallum megadása és küldése:</label>                                                            
                                                    <input type="text" value="@currentInterval" class="form-control" @onchange="RenderData" />
                                                    <button class="btn btn-info" @onclick='( () => this.Send(device.Name))'>Küldés</button>
                                                </div>
                                            </td>
                                            -->
                                            <td>
                                            <EditForm Model="@newDeviceInterval[device.Name]" OnValidSubmit="@HanleadValidIntervalSubmit" OnInvalidSubmit="@HanleadInvalidIntervalSubmit">
                                                    <div>
                                                        <label for="formInterval">Új intervallum megadása és küldése:</label>
                                                    <input type="text" class="form-control" id="formInterval" @bind-value="@newDeviceInterval[device.Name].Interval" />
                                                
                                                    </div>
                                                </EditForm>
                                             </td>

                                    }
                                    else
                                    {
                                        <td>Nincs adat</td>
                                    }
                                }
                            </tr>
                    }
                    <tr><td><p class="text-right"><button type="submit" class="btn btn-info" Style="margin-top:10px">Küldés</button></p></td></tr>
                </table>
            </div>
        </div>
    }
}

@code {

    private DateTime refreshTime = DateTime.Now;
    private String controlStatus = null;

    private List<EFMeasureDevice> devices = null;
    private Dictionary<string, MDFormInterval> newDeviceInterval = null;
    private Dictionary<string, MDFormInterval> currendDeviceIntervalInterval = null;

    private MDFormInterval FormInterval = new MDFormInterval(1);
    private bool errorMassage = false;
    private bool errorSending = false;

    private long currentInterval = -1;
    private long newInterval = -1;


    protected override async Task OnInitializedAsync()
    {
        await RefreshState();
    }

    private async Task RefreshState()
    {
        refreshTime = DateTime.Now;
        devices = await MDService.GetAllMeasureDevices();

        if (devices == null)
        {
            devices = new List<EFMeasureDevice>();
        }        
        else
        {
            newDeviceInterval = new Dictionary<string, MDFormInterval>();
            foreach (EFMeasureDevice device in devices)
            {
                currentInterval = await MDIntervalServcie.GetMDInterval(device.Name);
                if (!newDeviceInterval.Keys.Contains(device.Name))
                {
                    newDeviceInterval.Add(device.Name, new MDFormInterval(currentInterval));
                }                    
            }
            currendDeviceIntervalInterval = new Dictionary<string, MDFormInterval>();
            foreach (KeyValuePair<string,MDFormInterval> data in newDeviceInterval)
            {
                currendDeviceIntervalInterval.Add(data.Key, data.Value);
            }

        }
    }

    private void HanleadValidIntervalSubmit(EditContext context)
    {
        errorMassage = false;
        errorSending = false;
    }

    private void HanleadInvalidIntervalSubmit(EditContext context)
    {
        errorMassage = true;
        errorSending = false;
        foreach(KeyValuePair<string,MDFormInterval> data in newDeviceInterval)
        {
            if (currendDeviceIntervalInterval.Keys.Contains(data.Key) && currendDeviceIntervalInterval[data.Key] != data.Value)
            {
                Console.WriteLine($"Küldésre kerülő adatok {data.Key},{data.Value}");
                Send(data.Key, data.Value);
            }
        }
    }

    private async Task Send(string IPAddress, MDFormInterval interval)
    {
        
    }



        /*
        private async Task RenderData(ChangeEventArgs e)
            {
            //https://stackoverflow.com/questions/72452037/blazor-how-to-pass-input-from-a-textbox-to-a-function-as-argument
            string data = e.Value as string;
            Console.WriteLine(data);
        }

        private async Task Send(string IPAddress)
            {
            Console.WriteLine(IPAddress);
            //MDIntervalServcie.SendMdInterval(IPAddress, data);
    }
    */

}

