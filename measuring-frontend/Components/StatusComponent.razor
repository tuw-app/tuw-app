@page "/status"
@using DataModel.EFDataModel;
@using DataModel.MDDataModel;
@using MeasureFrontend.Services;


@inject IAPIMeasureDeviceService APIMeasureDeviceService;
@inject IMDStateService MDStateService;
@inject NavigationManager UriHelper

<h3>Mérőelem stásuszok</h3>
    @if (devices==null) 
    {
         <p>Az adatok betöltés alatt...</p>
    }
    else
    {
        @if (@devices.Count==0)
        {
        <p>Nincs elem az adatbázisban</p>
        }
        else
        {
            <p>Az adatábzisban @devices.Count mérő elemet találtam.</p>    
         
            <div class="container">
                <div class="table-wrapper">
                    
                    <div class="table-title">
                        <div class="row">
                            <div class="col-sm-6">
                            <h2><b>Mérőeszközök</b> kezelése</h2>
                            </div>
                        </div>
                    </div>
                    <table class="table table-striped table-hover">
					<thead>
						<tr>
							<th>IP cím</th>
							<th>Működés</th>
							<th>Mérés</th>
                            <th>Leállítás/elindítás</th>
                            <th>Mérés leállítás/indítás</th>
							<th>CPU mérési adatok</th>
                            <th>Hémérséklet mérési adatok</th>
						</tr>
					</thead>
                    <tr>
                        @foreach(EFMeasureDevice device in devices)
                        {
                            <td>@device.Name</td>
                            @GetState(device.Name);
                            @if (state==null || state.MeasuringInterval<0)
                            {
                                <td>Nincs információ..</td>
                            }
                            else
                            {
                                <td> @if (state.IsWorking)
                                    {
                                        <p> működik</p>
                                    } 
                                    else
                                    {
                                        <p> nem működik</p>
                                    }
                                </td>
                                <td>
                                    @if (state.IsMeasuring)
                                    {
                                        <p> mér</p>
                                    }
                                    else
                                    {
                                        <p> nem mér</p>
                                    }
                                </td>
                                <td>
                                    <button>Működés leállítás</button>
                                </td>
                                <td>
                                    <button>Mérés leállítás</button>
                                </td>
                                <td> <a href="@($"md/cpu/{device.Name}")"><span class="oi oi-data-transfer-download"></span></a></td>
                                <td> Hőmérésklet</td>

                            }
                        }
                    </tr>
                    </table>
                   
                </div>
            </div>
        }
    }
    
    

@code {
    private List<EFMeasureDevice> devices = new List<EFMeasureDevice>();
    private MDState state = new MDState();

    protected override async Task OnInitializedAsync()
    {
        devices = await MDService.GetAllMeasureDevices();
        if (devices == null)
            devices = new List<EFMeasureDevice>();
    }

    protected async Task GetState(string IPAddress)
    {
        state = await MDStateService.GetMdSatates(IPAddress);        
    }
}
